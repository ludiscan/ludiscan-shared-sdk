/**
 * API Documentation
 * The API description
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PlayPositionLogDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PlayPositionLogDto::PlayPositionLogDto()
{
    m_x = 0.0;
    m_xIsSet = false;
    m_y = 0.0;
    m_yIsSet = false;
    m_z = 0.0;
    m_zIsSet = false;
    m_Offset_timestamp = 0;
    m_Offset_timestampIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
}

PlayPositionLogDto::~PlayPositionLogDto()
{
}

void PlayPositionLogDto::validate()
{
    // TODO: implement validation
}

web::json::value PlayPositionLogDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_xIsSet)
    {
        val[utility::conversions::to_string_t(U("x"))] = ModelBase::toJson(m_x);
    }
    if(m_yIsSet)
    {
        val[utility::conversions::to_string_t(U("y"))] = ModelBase::toJson(m_y);
    }
    if(m_zIsSet)
    {
        val[utility::conversions::to_string_t(U("z"))] = ModelBase::toJson(m_z);
    }
    if(m_Offset_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("offset_timestamp"))] = ModelBase::toJson(m_Offset_timestamp);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }

    return val;
}

bool PlayPositionLogDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("x"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x")));
        if(!fieldValue.is_null())
        {
            double refVal_setX;
            ok &= ModelBase::fromJson(fieldValue, refVal_setX);
            setX(refVal_setX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("y"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("y")));
        if(!fieldValue.is_null())
        {
            double refVal_setY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setY);
            setY(refVal_setY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("z"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("z")));
        if(!fieldValue.is_null())
        {
            double refVal_setZ;
            ok &= ModelBase::fromJson(fieldValue, refVal_setZ);
            setZ(refVal_setZ);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offset_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offset_timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOffsetTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOffsetTimestamp);
            setOffsetTimestamp(refVal_setOffsetTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocation);
            setLocation(refVal_setLocation);
        }
    }
    return ok;
}

void PlayPositionLogDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_xIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x")), m_x));
    }
    if(m_yIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("y")), m_y));
    }
    if(m_zIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("z")), m_z));
    }
    if(m_Offset_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offset_timestamp")), m_Offset_timestamp));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
}

bool PlayPositionLogDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("x"))))
    {
        double refVal_setX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x"))), refVal_setX );
        setX(refVal_setX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("y"))))
    {
        double refVal_setY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("y"))), refVal_setY );
        setY(refVal_setY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("z"))))
    {
        double refVal_setZ;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("z"))), refVal_setZ );
        setZ(refVal_setZ);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offset_timestamp"))))
    {
        int32_t refVal_setOffsetTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offset_timestamp"))), refVal_setOffsetTimestamp );
        setOffsetTimestamp(refVal_setOffsetTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_setLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_setLocation );
        setLocation(refVal_setLocation);
    }
    return ok;
}

double PlayPositionLogDto::getX() const
{
    return m_x;
}

void PlayPositionLogDto::setX(double value)
{
    m_x = value;
    m_xIsSet = true;
}

bool PlayPositionLogDto::XIsSet() const
{
    return m_xIsSet;
}

void PlayPositionLogDto::unsetx()
{
    m_xIsSet = false;
}
double PlayPositionLogDto::getY() const
{
    return m_y;
}

void PlayPositionLogDto::setY(double value)
{
    m_y = value;
    m_yIsSet = true;
}

bool PlayPositionLogDto::YIsSet() const
{
    return m_yIsSet;
}

void PlayPositionLogDto::unsety()
{
    m_yIsSet = false;
}
double PlayPositionLogDto::getZ() const
{
    return m_z;
}

void PlayPositionLogDto::setZ(double value)
{
    m_z = value;
    m_zIsSet = true;
}

bool PlayPositionLogDto::ZIsSet() const
{
    return m_zIsSet;
}

void PlayPositionLogDto::unsetz()
{
    m_zIsSet = false;
}
int32_t PlayPositionLogDto::getOffsetTimestamp() const
{
    return m_Offset_timestamp;
}

void PlayPositionLogDto::setOffsetTimestamp(int32_t value)
{
    m_Offset_timestamp = value;
    m_Offset_timestampIsSet = true;
}

bool PlayPositionLogDto::offsetTimestampIsSet() const
{
    return m_Offset_timestampIsSet;
}

void PlayPositionLogDto::unsetOffset_timestamp()
{
    m_Offset_timestampIsSet = false;
}
utility::string_t PlayPositionLogDto::getLocation() const
{
    return m_Location;
}

void PlayPositionLogDto::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool PlayPositionLogDto::locationIsSet() const
{
    return m_LocationIsSet;
}

void PlayPositionLogDto::unsetLocation()
{
    m_LocationIsSet = false;
}
}
}
}
}


