/**
 * API Documentation
 * The API description
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0Api.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_V0Api_H_
#define ORG_OPENAPITOOLS_CLIENT_API_V0Api_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreatePlaySessionDto.h"
#include "CppRestOpenAPIClient/model/CreateProjectDto.h"
#include "CppRestOpenAPIClient/model/CreateUserDto.h"
#include "CppRestOpenAPIClient/model/DefaultErrorResponse.h"
#include "CppRestOpenAPIClient/model/DefaultSuccessResponse.h"
#include "CppRestOpenAPIClient/HttpContent.h"
#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/PlayPositionLogDto.h"
#include "CppRestOpenAPIClient/model/PlaySessionResponseDto.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  V0Api 
{
public:

    explicit V0Api( std::shared_ptr<const ApiClient> apiClient );

    virtual ~V0Api();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectId"></param>
    /// <param name="createPlaySessionDto"></param>
    pplx::task<void> playSessionControllerCreate(
        utility::string_t projectId,
        std::shared_ptr<CreatePlaySessionDto> createPlaySessionDto
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectId"></param>
    /// <param name="sessionId"></param>
    pplx::task<void> playSessionControllerDelete(
        utility::string_t projectId,
        utility::string_t sessionId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectId"></param>
    pplx::task<std::vector<std::shared_ptr<PlaySessionResponseDto>>> playSessionControllerFindAll(
        utility::string_t projectId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectId"></param>
    /// <param name="sessionId"></param>
    pplx::task<void> playSessionControllerFindOne(
        utility::string_t projectId,
        utility::string_t sessionId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectId"></param>
    /// <param name="sessionId"></param>
    pplx::task<void> playSessionControllerFinish(
        utility::string_t projectId,
        utility::string_t sessionId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectId"></param>
    /// <param name="sessionId"></param>
    pplx::task<std::vector<std::shared_ptr<PlayPositionLogDto>>> playerPositionLogControllerGet(
        utility::string_t projectId,
        utility::string_t sessionId
    ) const;
    /// <summary>
    /// Upload binary player data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectId"></param>
    /// <param name="sessionId"></param>
    /// <param name="file"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<DefaultSuccessResponse>> playerPositionLogControllerPost(
        utility::string_t projectId,
        utility::string_t sessionId,
        boost::optional<std::shared_ptr<HttpContent>> file
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createProjectDto"></param>
    pplx::task<std::shared_ptr<DefaultSuccessResponse>> projectsControllerCreate(
        std::shared_ptr<CreateProjectDto> createProjectDto
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> projectsControllerFindAll(
    ) const;
    /// <summary>
    /// ユーザーを作成
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createUserDto"></param>
    pplx::task<std::shared_ptr<Object>> usersControllerCreate(
        std::shared_ptr<CreateUserDto> createUserDto
    ) const;
    /// <summary>
    /// すべてのユーザーを取得
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Object>>> usersControllerFindAll(
    ) const;
    /// <summary>
    /// 特定のユーザーを取得
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<Object>> usersControllerFindOne(
        utility::string_t id
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_V0Api_H_ */

