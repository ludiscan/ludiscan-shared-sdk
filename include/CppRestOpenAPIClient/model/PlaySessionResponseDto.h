/**
 * API Documentation
 * The API description
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PlaySessionResponseDto.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PlaySessionResponseDto_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PlaySessionResponseDto_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  PlaySessionResponseDto
    : public ModelBase
{
public:
    PlaySessionResponseDto();
    virtual ~PlaySessionResponseDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PlaySessionResponseDto members

    /// <summary>
    /// 
    /// </summary>
    double getSessionId() const;
    bool sessionIdIsSet() const;
    void unsetSession_id();

    void setSessionId(double value);

    /// <summary>
    /// 
    /// </summary>
    double getProjectId() const;
    bool projectIdIsSet() const;
    void unsetProject_id();

    void setProjectId(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeviceId() const;
    bool deviceIdIsSet() const;
    void unsetDevice_id();

    void setDeviceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPlatform() const;
    bool platformIsSet() const;
    void unsetPlatform();

    void setPlatform(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAppVersion() const;
    bool appVersionIsSet() const;
    void unsetAppVersion();

    void setAppVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getMetaData() const;
    bool metaDataIsSet() const;
    void unsetMetaData();

    void setMetaData(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getStartTime() const;
    bool startTimeIsSet() const;
    void unsetStartTime();

    void setStartTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEndTime() const;
    bool endTimeIsSet() const;
    void unsetEndTime();

    void setEndTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsPlaying() const;
    bool isPlayingIsSet() const;
    void unsetIsPlaying();

    void setIsPlaying(bool value);


protected:
    double m_Session_id;
    bool m_Session_idIsSet;
    double m_Project_id;
    bool m_Project_idIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Device_id;
    bool m_Device_idIsSet;
    utility::string_t m_Platform;
    bool m_PlatformIsSet;
    utility::string_t m_AppVersion;
    bool m_AppVersionIsSet;
    std::shared_ptr<Object> m_MetaData;
    bool m_MetaDataIsSet;
    utility::datetime m_StartTime;
    bool m_StartTimeIsSet;
    utility::datetime m_EndTime;
    bool m_EndTimeIsSet;
    bool m_IsPlaying;
    bool m_IsPlayingIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PlaySessionResponseDto_H_ */
