/**
 * API Documentation
 * The API description
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PlaySessionResponseDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PlaySessionResponseDto::PlaySessionResponseDto()
{
    m_Session_id = 0.0;
    m_Session_idIsSet = false;
    m_Project_id = 0.0;
    m_Project_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Device_id = utility::conversions::to_string_t("");
    m_Device_idIsSet = false;
    m_Platform = utility::conversions::to_string_t("");
    m_PlatformIsSet = false;
    m_AppVersion = utility::conversions::to_string_t("");
    m_AppVersionIsSet = false;
    m_MetaDataIsSet = false;
    m_StartTime = utility::datetime();
    m_StartTimeIsSet = false;
    m_EndTime = utility::datetime();
    m_EndTimeIsSet = false;
    m_IsPlaying = false;
    m_IsPlayingIsSet = false;
}

PlaySessionResponseDto::~PlaySessionResponseDto()
{
}

void PlaySessionResponseDto::validate()
{
    // TODO: implement validation
}

web::json::value PlaySessionResponseDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Session_idIsSet)
    {
        val[utility::conversions::to_string_t(U("session_id"))] = ModelBase::toJson(m_Session_id);
    }
    if(m_Project_idIsSet)
    {
        val[utility::conversions::to_string_t(U("project_id"))] = ModelBase::toJson(m_Project_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Device_idIsSet)
    {
        val[utility::conversions::to_string_t(U("device_id"))] = ModelBase::toJson(m_Device_id);
    }
    if(m_PlatformIsSet)
    {
        val[utility::conversions::to_string_t(U("platform"))] = ModelBase::toJson(m_Platform);
    }
    if(m_AppVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("appVersion"))] = ModelBase::toJson(m_AppVersion);
    }
    if(m_MetaDataIsSet)
    {
        val[utility::conversions::to_string_t(U("metaData"))] = ModelBase::toJson(m_MetaData);
    }
    if(m_StartTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("startTime"))] = ModelBase::toJson(m_StartTime);
    }
    if(m_EndTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("endTime"))] = ModelBase::toJson(m_EndTime);
    }
    if(m_IsPlayingIsSet)
    {
        val[utility::conversions::to_string_t(U("isPlaying"))] = ModelBase::toJson(m_IsPlaying);
    }

    return val;
}

bool PlaySessionResponseDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("session_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_id")));
        if(!fieldValue.is_null())
        {
            double refVal_setSessionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionId);
            setSessionId(refVal_setSessionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("project_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("project_id")));
        if(!fieldValue.is_null())
        {
            double refVal_setProjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProjectId);
            setProjectId(refVal_setProjectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceId);
            setDeviceId(refVal_setDeviceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("platform"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("platform")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlatform;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatform);
            setPlatform(refVal_setPlatform);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("appVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("appVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppVersion);
            setAppVersion(refVal_setAppVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metaData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metaData")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setMetaData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetaData);
            setMetaData(refVal_setMetaData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("endTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("endTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEndTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndTime);
            setEndTime(refVal_setEndTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isPlaying"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isPlaying")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsPlaying;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsPlaying);
            setIsPlaying(refVal_setIsPlaying);
        }
    }
    return ok;
}

void PlaySessionResponseDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Session_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_id")), m_Session_id));
    }
    if(m_Project_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("project_id")), m_Project_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Device_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_id")), m_Device_id));
    }
    if(m_PlatformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("platform")), m_Platform));
    }
    if(m_AppVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("appVersion")), m_AppVersion));
    }
    if(m_MetaDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metaData")), m_MetaData));
    }
    if(m_StartTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startTime")), m_StartTime));
    }
    if(m_EndTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("endTime")), m_EndTime));
    }
    if(m_IsPlayingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isPlaying")), m_IsPlaying));
    }
}

bool PlaySessionResponseDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("session_id"))))
    {
        double refVal_setSessionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_id"))), refVal_setSessionId );
        setSessionId(refVal_setSessionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("project_id"))))
    {
        double refVal_setProjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("project_id"))), refVal_setProjectId );
        setProjectId(refVal_setProjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_id"))))
    {
        utility::string_t refVal_setDeviceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_id"))), refVal_setDeviceId );
        setDeviceId(refVal_setDeviceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("platform"))))
    {
        utility::string_t refVal_setPlatform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("platform"))), refVal_setPlatform );
        setPlatform(refVal_setPlatform);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("appVersion"))))
    {
        utility::string_t refVal_setAppVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("appVersion"))), refVal_setAppVersion );
        setAppVersion(refVal_setAppVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metaData"))))
    {
        std::shared_ptr<Object> refVal_setMetaData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metaData"))), refVal_setMetaData );
        setMetaData(refVal_setMetaData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startTime"))))
    {
        utility::datetime refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startTime"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("endTime"))))
    {
        utility::datetime refVal_setEndTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("endTime"))), refVal_setEndTime );
        setEndTime(refVal_setEndTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isPlaying"))))
    {
        bool refVal_setIsPlaying;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isPlaying"))), refVal_setIsPlaying );
        setIsPlaying(refVal_setIsPlaying);
    }
    return ok;
}

double PlaySessionResponseDto::getSessionId() const
{
    return m_Session_id;
}

void PlaySessionResponseDto::setSessionId(double value)
{
    m_Session_id = value;
    m_Session_idIsSet = true;
}

bool PlaySessionResponseDto::sessionIdIsSet() const
{
    return m_Session_idIsSet;
}

void PlaySessionResponseDto::unsetSession_id()
{
    m_Session_idIsSet = false;
}
double PlaySessionResponseDto::getProjectId() const
{
    return m_Project_id;
}

void PlaySessionResponseDto::setProjectId(double value)
{
    m_Project_id = value;
    m_Project_idIsSet = true;
}

bool PlaySessionResponseDto::projectIdIsSet() const
{
    return m_Project_idIsSet;
}

void PlaySessionResponseDto::unsetProject_id()
{
    m_Project_idIsSet = false;
}
utility::string_t PlaySessionResponseDto::getName() const
{
    return m_Name;
}

void PlaySessionResponseDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool PlaySessionResponseDto::nameIsSet() const
{
    return m_NameIsSet;
}

void PlaySessionResponseDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t PlaySessionResponseDto::getDeviceId() const
{
    return m_Device_id;
}

void PlaySessionResponseDto::setDeviceId(const utility::string_t& value)
{
    m_Device_id = value;
    m_Device_idIsSet = true;
}

bool PlaySessionResponseDto::deviceIdIsSet() const
{
    return m_Device_idIsSet;
}

void PlaySessionResponseDto::unsetDevice_id()
{
    m_Device_idIsSet = false;
}
utility::string_t PlaySessionResponseDto::getPlatform() const
{
    return m_Platform;
}

void PlaySessionResponseDto::setPlatform(const utility::string_t& value)
{
    m_Platform = value;
    m_PlatformIsSet = true;
}

bool PlaySessionResponseDto::platformIsSet() const
{
    return m_PlatformIsSet;
}

void PlaySessionResponseDto::unsetPlatform()
{
    m_PlatformIsSet = false;
}
utility::string_t PlaySessionResponseDto::getAppVersion() const
{
    return m_AppVersion;
}

void PlaySessionResponseDto::setAppVersion(const utility::string_t& value)
{
    m_AppVersion = value;
    m_AppVersionIsSet = true;
}

bool PlaySessionResponseDto::appVersionIsSet() const
{
    return m_AppVersionIsSet;
}

void PlaySessionResponseDto::unsetAppVersion()
{
    m_AppVersionIsSet = false;
}
std::shared_ptr<Object> PlaySessionResponseDto::getMetaData() const
{
    return m_MetaData;
}

void PlaySessionResponseDto::setMetaData(const std::shared_ptr<Object>& value)
{
    m_MetaData = value;
    m_MetaDataIsSet = true;
}

bool PlaySessionResponseDto::metaDataIsSet() const
{
    return m_MetaDataIsSet;
}

void PlaySessionResponseDto::unsetMetaData()
{
    m_MetaDataIsSet = false;
}
utility::datetime PlaySessionResponseDto::getStartTime() const
{
    return m_StartTime;
}

void PlaySessionResponseDto::setStartTime(const utility::datetime& value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}

bool PlaySessionResponseDto::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}

void PlaySessionResponseDto::unsetStartTime()
{
    m_StartTimeIsSet = false;
}
utility::datetime PlaySessionResponseDto::getEndTime() const
{
    return m_EndTime;
}

void PlaySessionResponseDto::setEndTime(const utility::datetime& value)
{
    m_EndTime = value;
    m_EndTimeIsSet = true;
}

bool PlaySessionResponseDto::endTimeIsSet() const
{
    return m_EndTimeIsSet;
}

void PlaySessionResponseDto::unsetEndTime()
{
    m_EndTimeIsSet = false;
}
bool PlaySessionResponseDto::isIsPlaying() const
{
    return m_IsPlaying;
}

void PlaySessionResponseDto::setIsPlaying(bool value)
{
    m_IsPlaying = value;
    m_IsPlayingIsSet = true;
}

bool PlaySessionResponseDto::isPlayingIsSet() const
{
    return m_IsPlayingIsSet;
}

void PlaySessionResponseDto::unsetIsPlaying()
{
    m_IsPlayingIsSet = false;
}
}
}
}
}


