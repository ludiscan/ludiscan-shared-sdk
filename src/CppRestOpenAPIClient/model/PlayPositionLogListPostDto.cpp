/**
 * API Documentation
 * The API description
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PlayPositionLogListPostDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PlayPositionLogListPostDto::PlayPositionLogListPostDto()
{
    m_PositionsIsSet = false;
}

PlayPositionLogListPostDto::~PlayPositionLogListPostDto()
{
}

void PlayPositionLogListPostDto::validate()
{
    // TODO: implement validation
}

web::json::value PlayPositionLogListPostDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PositionsIsSet)
    {
        val[utility::conversions::to_string_t(U("positions"))] = ModelBase::toJson(m_Positions);
    }

    return val;
}

bool PlayPositionLogListPostDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("positions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("positions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPositions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPositions);
            setPositions(refVal_setPositions);
        }
    }
    return ok;
}

void PlayPositionLogListPostDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PositionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("positions")), m_Positions));
    }
}

bool PlayPositionLogListPostDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("positions"))))
    {
        std::shared_ptr<Object> refVal_setPositions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("positions"))), refVal_setPositions );
        setPositions(refVal_setPositions);
    }
    return ok;
}

std::shared_ptr<Object> PlayPositionLogListPostDto::getPositions() const
{
    return m_Positions;
}

void PlayPositionLogListPostDto::setPositions(const std::shared_ptr<Object>& value)
{
    m_Positions = value;
    m_PositionsIsSet = true;
}

bool PlayPositionLogListPostDto::positionsIsSet() const
{
    return m_PositionsIsSet;
}

void PlayPositionLogListPostDto::unsetPositions()
{
    m_PositionsIsSet = false;
}
}
}
}
}


