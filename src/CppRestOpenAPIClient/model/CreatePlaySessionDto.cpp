/**
 * API Documentation
 * The API description
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreatePlaySessionDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreatePlaySessionDto::CreatePlaySessionDto()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_DeviceId = utility::conversions::to_string_t("");
    m_DeviceIdIsSet = false;
    m_Platform = utility::conversions::to_string_t("");
    m_PlatformIsSet = false;
    m_AppVersion = utility::conversions::to_string_t("");
    m_AppVersionIsSet = false;
}

CreatePlaySessionDto::~CreatePlaySessionDto()
{
}

void CreatePlaySessionDto::validate()
{
    // TODO: implement validation
}

web::json::value CreatePlaySessionDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DeviceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("deviceId"))] = ModelBase::toJson(m_DeviceId);
    }
    if(m_PlatformIsSet)
    {
        val[utility::conversions::to_string_t(U("platform"))] = ModelBase::toJson(m_Platform);
    }
    if(m_AppVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("appVersion"))] = ModelBase::toJson(m_AppVersion);
    }

    return val;
}

bool CreatePlaySessionDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deviceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deviceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceId);
            setDeviceId(refVal_setDeviceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("platform"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("platform")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlatform;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatform);
            setPlatform(refVal_setPlatform);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("appVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("appVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppVersion);
            setAppVersion(refVal_setAppVersion);
        }
    }
    return ok;
}

void CreatePlaySessionDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DeviceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deviceId")), m_DeviceId));
    }
    if(m_PlatformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("platform")), m_Platform));
    }
    if(m_AppVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("appVersion")), m_AppVersion));
    }
}

bool CreatePlaySessionDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deviceId"))))
    {
        utility::string_t refVal_setDeviceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deviceId"))), refVal_setDeviceId );
        setDeviceId(refVal_setDeviceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("platform"))))
    {
        utility::string_t refVal_setPlatform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("platform"))), refVal_setPlatform );
        setPlatform(refVal_setPlatform);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("appVersion"))))
    {
        utility::string_t refVal_setAppVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("appVersion"))), refVal_setAppVersion );
        setAppVersion(refVal_setAppVersion);
    }
    return ok;
}

utility::string_t CreatePlaySessionDto::getName() const
{
    return m_Name;
}

void CreatePlaySessionDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreatePlaySessionDto::nameIsSet() const
{
    return m_NameIsSet;
}

void CreatePlaySessionDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreatePlaySessionDto::getDeviceId() const
{
    return m_DeviceId;
}

void CreatePlaySessionDto::setDeviceId(const utility::string_t& value)
{
    m_DeviceId = value;
    m_DeviceIdIsSet = true;
}

bool CreatePlaySessionDto::deviceIdIsSet() const
{
    return m_DeviceIdIsSet;
}

void CreatePlaySessionDto::unsetDeviceId()
{
    m_DeviceIdIsSet = false;
}
utility::string_t CreatePlaySessionDto::getPlatform() const
{
    return m_Platform;
}

void CreatePlaySessionDto::setPlatform(const utility::string_t& value)
{
    m_Platform = value;
    m_PlatformIsSet = true;
}

bool CreatePlaySessionDto::platformIsSet() const
{
    return m_PlatformIsSet;
}

void CreatePlaySessionDto::unsetPlatform()
{
    m_PlatformIsSet = false;
}
utility::string_t CreatePlaySessionDto::getAppVersion() const
{
    return m_AppVersion;
}

void CreatePlaySessionDto::setAppVersion(const utility::string_t& value)
{
    m_AppVersion = value;
    m_AppVersionIsSet = true;
}

bool CreatePlaySessionDto::appVersionIsSet() const
{
    return m_AppVersionIsSet;
}

void CreatePlaySessionDto::unsetAppVersion()
{
    m_AppVersionIsSet = false;
}
}
}
}
}


